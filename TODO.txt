Add tests for only adding character summaries to the output when they differ from before.
Also refactor the character summaries into "character display" output or the like.

Refactor the test data for reuse.

Update speak() and action() in the JS to include character descriptions or refactor to use character objects that reference them.

Refactor for a consistent usage of "content" versus "contents".

Make the picture change a separate command (not part of, e.g., speak()) inlined by the exporter).

---

De-couple the "unfinished" status reports from the story-advancement methods.

Consider refactoring the text output out completely.  Move as much of the static HTML into pre-defined variables and generator functions as possible to make test refactoring easier.

Use the DSL to handle the test scene data where possible.

---

Replace the "game" singleton object with better pre-feature code support instead, if actually preferable.

Refactor the features and steps to expect *only* certain content so as to avoid unexpected content.

FINISH improving the text-based interface used by the tutorial, including better prompts, prompts that require specific options, fix the choice defaulting or make it intentional, and add features for all of this!

Add some introspective Ruby class > JS object export code for automatic mitigation of changes. 
Ex:
class StageElement
	attr_accessor :name
end

function StageElement(name) {
	this.name = name;
}

Move some more of the implicit things (like always running the :intro scene first if provided) into the feature lists.

Consider ways to keep the tutorial script and its final product results DRYer.

Add an end() method to the GUI for cleaning up its workspace.
